/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Actions/Action.ts":
/*!*******************************!*\
  !*** ./src/Actions/Action.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Action = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
exports.Action = function () {
    function Action(mapOfTheGame) {
        _classCallCheck(this, Action);
        this.mapOfTheGame = mapOfTheGame;
    }
    return _createClass(Action, [{
            key: "produce",
            value: function produce() { }
        }]);
}();
;


/***/ }),

/***/ "./src/Actions/AddEntity.ts":
/*!**********************************!*\
  !*** ./src/Actions/AddEntity.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddEntity = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Action_1 = __webpack_require__(/*! ./Action */ "./src/Actions/Action.ts");
exports.AddEntity = function (_Action) {
    function AddEntity(mapOfTheGame, lowerLimit, percent, additionalElement, nameElement) {
        var _this;
        _classCallCheck(this, AddEntity);
        _this = _callSuper(this, AddEntity, [mapOfTheGame]);
        _this.lowerLimit = lowerLimit;
        _this.percent = percent;
        _this.additionalElement = additionalElement;
        _this.nameElement = nameElement;
        return _this;
    }
    _inherits(AddEntity, _Action);
    return _createClass(AddEntity, [{
            key: "produce",
            value: function produce() {
                var _this$mapOfTheGame = this.mapOfTheGame, size = _this$mapOfTheGame.size, width = _this$mapOfTheGame.width, height = _this$mapOfTheGame.height;
                var leftElements = this.mapOfTheGame.getQuantity(this.nameElement);
                var additionalCount = Math.floor(size * this.percent / 100);
                if (leftElements < this.lowerLimit) {
                    loop1: for (var i = 0; i < height; i++) {
                        loop2: for (var j = 0; j < width; j++) {
                            if (additionalCount === 0) {
                                break loop1;
                            }
                            var pos = "".concat(j, "/").concat(i);
                            var isEmpty = !Boolean(this.mapOfTheGame.getEntity(pos));
                            if (isEmpty) {
                                this.mapOfTheGame.addEntity(pos, new this.additionalElement());
                                additionalCount--;
                            }
                        }
                    }
                }
            }
        }]);
}(Action_1.Action);
;


/***/ }),

/***/ "./src/Actions/AddGrass.ts":
/*!*********************************!*\
  !*** ./src/Actions/AddGrass.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddGrass = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Grass_1 = __webpack_require__(/*! ../Objects/Grass */ "./src/Objects/Grass.ts");
const AddEntity_1 = __webpack_require__(/*! ./AddEntity */ "./src/Actions/AddEntity.ts");
exports.AddGrass = function (_AddEntity) {
    function AddGrass(mapOfTheGame) {
        _classCallCheck(this, AddGrass);
        return _callSuper(this, AddGrass, [mapOfTheGame, 3, 12.5, Grass_1.Grass, "Grass"]);
    }
    _inherits(AddGrass, _AddEntity);
    return _createClass(AddGrass);
}(AddEntity_1.AddEntity);
;


/***/ }),

/***/ "./src/Actions/AddHerbivores.ts":
/*!**************************************!*\
  !*** ./src/Actions/AddHerbivores.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.AddHerbivores = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const AddEntity_1 = __webpack_require__(/*! ./AddEntity */ "./src/Actions/AddEntity.ts");
const Herbivore_1 = __webpack_require__(/*! ../Creatures/Herbivore */ "./src/Creatures/Herbivore.ts");
exports.AddHerbivores = function (_AddEntity) {
    function AddHerbivores(mapOfTheGame) {
        _classCallCheck(this, AddHerbivores);
        return _callSuper(this, AddHerbivores, [mapOfTheGame, 2, 12.5, Herbivore_1.Herbivore, "Herbivore"]);
    }
    _inherits(AddHerbivores, _AddEntity);
    return _createClass(AddHerbivores);
}(AddEntity_1.AddEntity);
;


/***/ }),

/***/ "./src/Actions/ArrangeAllObjects.ts":
/*!******************************************!*\
  !*** ./src/Actions/ArrangeAllObjects.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.ArrangeAllObjects = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Herbivore_1 = __webpack_require__(/*! ../Creatures/Herbivore */ "./src/Creatures/Herbivore.ts");
const Predator_1 = __webpack_require__(/*! ../Creatures/Predator */ "./src/Creatures/Predator.ts");
const Grass_1 = __webpack_require__(/*! ../Objects/Grass */ "./src/Objects/Grass.ts");
const Rock_1 = __webpack_require__(/*! ../Objects/Rock */ "./src/Objects/Rock.ts");
const Tree_1 = __webpack_require__(/*! ../Objects/Tree */ "./src/Objects/Tree.ts");
const Action_1 = __webpack_require__(/*! ./Action */ "./src/Actions/Action.ts");
exports.ArrangeAllObjects = function (_Action) {
    function ArrangeAllObjects(mapOfTheGame) {
        var _this;
        _classCallCheck(this, ArrangeAllObjects);
        _this = _callSuper(this, ArrangeAllObjects, [mapOfTheGame]);
        _this.pull = [Herbivore_1.Herbivore, Predator_1.Predator, Grass_1.Grass, Rock_1.Rock, Tree_1.Tree];
        return _this;
    }
    _inherits(ArrangeAllObjects, _Action);
    return _createClass(ArrangeAllObjects, [{
            key: "produce",
            value: function produce() {
                var _this$mapOfTheGame = this.mapOfTheGame, width = _this$mapOfTheGame.width, height = _this$mapOfTheGame.height;
                for (var i = 0; i < height; i++) {
                    for (var j = 0; j < width; j++) {
                        if (Math.random() < 0.5) {
                            var obj = new this.pull[Math.floor(Math.random() * 5)]();
                            var pos = "".concat(j, "/").concat(i); // x/y coordinates
                            this.mapOfTheGame.addEntity(pos, obj);
                        }
                    }
                }
            }
            // --simple test--
            //   produce() {
            //     const { width, height, map } = this.mapOfTheGame;
            //     map.set(`${0}/${0}`, new Herbivore()); // x/y coordinates
            //     map.set(`${width - 1}/${height - 1}`, new Predator()); // x/y coordinates
            //   }
        }]);
}(Action_1.Action);
;


/***/ }),

/***/ "./src/Actions/MovementOfCreatures.ts":
/*!********************************************!*\
  !*** ./src/Actions/MovementOfCreatures.ts ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MovementOfCreatures = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) {
    var e, n, i, u, a = [], f = !0, o = !1;
    try {
        if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t)
                return;
            f = !1;
        }
        else
            for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0)
                ;
    }
    catch (r) {
        o = !0, n = r;
    }
    finally {
        try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
                return;
        }
        finally {
            if (o)
                throw n;
        }
    }
    return a;
} }
function _arrayWithHoles(arr) { if (Array.isArray(arr))
    return arr; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
        if (it)
            o = it;
        var i = 0;
        var F = function F() { };
        return { s: F, n: function n() { if (i >= o.length)
                return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
} var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try {
        if (!normalCompletion && it["return"] != null)
            it["return"]();
    }
    finally {
        if (didErr)
            throw err;
    } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o)
    return; if (typeof o === "string")
    return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor)
    n = o.constructor.name; if (n === "Map" || n === "Set")
    return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length)
    len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Creature_1 = __webpack_require__(/*! ../Creatures/Creature */ "./src/Creatures/Creature.ts");
const Action_1 = __webpack_require__(/*! ./Action */ "./src/Actions/Action.ts");
exports.MovementOfCreatures = function (_Action) {
    function MovementOfCreatures(mapOfTheGame) {
        _classCallCheck(this, MovementOfCreatures);
        return _callSuper(this, MovementOfCreatures, [mapOfTheGame]);
    }
    _inherits(MovementOfCreatures, _Action);
    return _createClass(MovementOfCreatures, [{
            key: "produce",
            value: function produce() {
                var map = this.mapOfTheGame.map;
                var _iterator = _createForOfIteratorHelper(map), _step;
                try {
                    for (_iterator.s(); !(_step = _iterator.n()).done;) {
                        var _step$value = _slicedToArray(_step.value, 2), position = _step$value[0], obj = _step$value[1];
                        if (obj instanceof Creature_1.Creature) {
                            obj.makeMove(position, this.mapOfTheGame);
                        }
                    }
                }
                catch (err) {
                    _iterator.e(err);
                }
                finally {
                    _iterator.f();
                }
                var _iterator2 = _createForOfIteratorHelper(map), _step2;
                try {
                    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                        var _step2$value = _slicedToArray(_step2.value, 2), _ = _step2$value[0], _obj = _step2$value[1];
                        if (_obj instanceof Creature_1.Creature) {
                            _obj.isWalked = false;
                        }
                    }
                }
                catch (err) {
                    _iterator2.e(err);
                }
                finally {
                    _iterator2.f();
                }
            }
        }]);
}(Action_1.Action);
;


/***/ }),

/***/ "./src/Creatures/Creature.ts":
/*!***********************************!*\
  !*** ./src/Creatures/Creature.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Creature = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Entity_1 = __webpack_require__(/*! ../Main/Entity */ "./src/Main/Entity.ts");
const BFS_1 = __webpack_require__(/*! ../Utils/BFS */ "./src/Utils/BFS.ts");
const Herbivore_1 = __webpack_require__(/*! ./Herbivore */ "./src/Creatures/Herbivore.ts");
exports.Creature = function (_Entity) {
    function Creature(velocity, healthPoints) {
        var _this;
        _classCallCheck(this, Creature);
        _this = _callSuper(this, Creature);
        _this.velocity = velocity;
        _this.healthPoints = healthPoints;
        _this.isWalked = false;
        if (_this.constructor == Creature) {
            throw new Error("Abstract classes can't be instantiated.");
        }
        return _this;
    }
    _inherits(Creature, _Entity);
    return _createClass(Creature, [{
            key: "makeMove",
            value: function makeMove(position, mapOfTheGame, goalClass, goalName, power) {
                if (this.isWalked)
                    return;
                var pathForGoal = BFS_1.BFS.search(position, mapOfTheGame, goalClass);
                var stepLeft = this.velocity;
                if (!pathForGoal)
                    return;
                while (stepLeft > 0) {
                    // goal is near
                    if (pathForGoal.length === 2) {
                        var _pos = pathForGoal[1];
                        if (goalName === "Grass") {
                            mapOfTheGame.removeEntity(_pos);
                            this.healthPoints++;
                        }
                        if (goalName === "Herbivore") {
                            var herbivore = mapOfTheGame.getEntity(_pos);
                            if (herbivore instanceof Herbivore_1.Herbivore) {
                                if (power > herbivore.healthPoints) {
                                    mapOfTheGame.removeEntity(_pos);
                                    this.healthPoints += herbivore.healthPoints;
                                }
                                else {
                                    herbivore.healthPoints -= power;
                                    this.healthPoints += power;
                                }
                            }
                        }
                        stepLeft--;
                        continue;
                    }
                    var difference = pathForGoal.length - 1 - stepLeft;
                    var wasted = difference ? stepLeft : pathForGoal.length - 1;
                    var pos = pathForGoal[wasted];
                    var obj = mapOfTheGame.getEntity(pathForGoal[0]);
                    mapOfTheGame.moveEntity(pathForGoal[0], pos, obj);
                    pathForGoal.splice(0, wasted);
                    stepLeft -= wasted;
                }
                this.isWalked = true;
            }
        }]);
}(Entity_1.Entity);


/***/ }),

/***/ "./src/Creatures/Herbivore.ts":
/*!************************************!*\
  !*** ./src/Creatures/Herbivore.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Herbivore = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
}
else {
    _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base)
        return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
    } return desc.value; };
} return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null)
        break;
} return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Creature_1 = __webpack_require__(/*! ./Creature */ "./src/Creatures/Creature.ts");
const Grass_1 = __webpack_require__(/*! ../Objects/Grass */ "./src/Objects/Grass.ts");
exports.Herbivore = function (_Creature) {
    function Herbivore() {
        var _this;
        var velocity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var healthPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
        _classCallCheck(this, Herbivore);
        _this = _callSuper(this, Herbivore, [velocity, healthPoints]);
        _this.view = "🐄";
        return _this;
    }
    _inherits(Herbivore, _Creature);
    return _createClass(Herbivore, [{
            key: "makeMove",
            value: function makeMove(position, mapOfTheGame) {
                _get(_getPrototypeOf(Herbivore.prototype), "makeMove", this).call(this, position, mapOfTheGame, new Grass_1.Grass(), "Grass");
            }
        }]);
}(Creature_1.Creature);
;


/***/ }),

/***/ "./src/Creatures/Predator.ts":
/*!***********************************!*\
  !*** ./src/Creatures/Predator.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Predator = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _get() { if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
}
else {
    _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base)
        return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
    } return desc.value; };
} return _get.apply(this, arguments); }
function _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null)
        break;
} return object; }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Creature_1 = __webpack_require__(/*! ./Creature */ "./src/Creatures/Creature.ts");
const Herbivore_1 = __webpack_require__(/*! ./Herbivore */ "./src/Creatures/Herbivore.ts");
exports.Predator = function (_Creature) {
    function Predator() {
        var _this;
        var velocity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var healthPoints = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
        var power = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
        _classCallCheck(this, Predator);
        _this = _callSuper(this, Predator, [velocity, healthPoints]);
        _this.power = power;
        _this.view = "🐺";
        return _this;
    }
    _inherits(Predator, _Creature);
    return _createClass(Predator, [{
            key: "makeMove",
            value: function makeMove(position, mapOfTheGame) {
                _get(_getPrototypeOf(Predator.prototype), "makeMove", this).call(this, position, mapOfTheGame, new Herbivore_1.Herbivore(), "Herbivore", this.power);
            }
        }]);
}(Creature_1.Creature);
;


/***/ }),

/***/ "./src/Main/Entity.ts":
/*!****************************!*\
  !*** ./src/Main/Entity.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Entity = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
exports.Entity = _createClass(function Entity() {
    _classCallCheck(this, Entity);
});
;


/***/ }),

/***/ "./src/Main/MapOfTheGame.ts":
/*!**********************************!*\
  !*** ./src/Main/MapOfTheGame.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.MapOfTheGame = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Entity_1 = __webpack_require__(/*! ./Entity */ "./src/Main/Entity.ts");
exports.MapOfTheGame = function (_Entity) {
    function MapOfTheGame(width, height) {
        var _this;
        _classCallCheck(this, MapOfTheGame);
        _this = _callSuper(this, MapOfTheGame);
        _this.width = width;
        _this.height = height;
        _this.size = width * height;
        _this.map = new Map();
        _this.quantity = {
            Herbivore: 0,
            Predator: 0,
            Grass: 0,
            Rock: 0,
            Tree: 0
        };
        return _this;
    }
    _inherits(MapOfTheGame, _Entity);
    return _createClass(MapOfTheGame, [{
            key: "addEntity",
            value: function addEntity(pos, obj) {
                this.map.set(pos, obj);
                this.incQuantity(obj);
            }
        }, {
            key: "removeEntity",
            value: function removeEntity(pos) {
                this.decQuantity(pos);
                this.map["delete"](pos);
            }
        }, {
            key: "getEntity",
            value: function getEntity(pos) {
                return this.map.get(pos);
            }
        }, {
            key: "moveEntity",
            value: function moveEntity(from, to, obj) {
                this.removeEntity(from);
                this.addEntity(to, obj);
            }
        }, {
            key: "incQuantity",
            value: function incQuantity(obj) {
                var name = obj.constructor.name;
                this.quantity[name] = this.quantity[name] + 1;
            }
        }, {
            key: "decQuantity",
            value: function decQuantity(pos) {
                var name = this.getEntity(pos).constructor.name;
                this.quantity[name] = this.quantity[name] - 1;
            }
        }, {
            key: "getQuantity",
            value: function getQuantity(name) {
                return this.quantity[name];
            }
        }]);
}(Entity_1.Entity);
;


/***/ }),

/***/ "./src/Main/Renderer.ts":
/*!******************************!*\
  !*** ./src/Main/Renderer.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Renderer = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
exports.Renderer = function () {
    function Renderer(mapOfTheGame) {
        _classCallCheck(this, Renderer);
        this.mapOfTheGame = mapOfTheGame;
    }
    return _createClass(Renderer, [{
            key: "show",
            value: function show() {
                var _this$mapOfTheGame = this.mapOfTheGame, width = _this$mapOfTheGame.width, height = _this$mapOfTheGame.height;
                for (var i = 0; i < height; i++) {
                    var str = "";
                    for (var j = 0; j < width; j++) {
                        var pos = [j, i].join("/");
                        var entity = this.mapOfTheGame.getEntity(pos);
                        if (entity) {
                            str += entity.view;
                        }
                        else {
                            str += "__";
                        }
                    }
                    console.log(str);
                }
                console.log(this.mapOfTheGame.quantity);
                console.log("////////////////");
            }
        }]);
}();
;


/***/ }),

/***/ "./src/Objects/Grass.ts":
/*!******************************!*\
  !*** ./src/Objects/Grass.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Grass = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Entity_1 = __webpack_require__(/*! ../Main/Entity */ "./src/Main/Entity.ts");
exports.Grass = function (_Entity) {
    function Grass() {
        var _this;
        _classCallCheck(this, Grass);
        _this = _callSuper(this, Grass);
        _this.view = "🌿";
        return _this;
    }
    _inherits(Grass, _Entity);
    return _createClass(Grass);
}(Entity_1.Entity);
;


/***/ }),

/***/ "./src/Objects/Rock.ts":
/*!*****************************!*\
  !*** ./src/Objects/Rock.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Rock = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Entity_1 = __webpack_require__(/*! ../Main/Entity */ "./src/Main/Entity.ts");
exports.Rock = function (_Entity) {
    function Rock() {
        var _this;
        _classCallCheck(this, Rock);
        _this = _callSuper(this, Rock);
        _this.view = "🗿";
        return _this;
    }
    _inherits(Rock, _Entity);
    return _createClass(Rock);
}(Entity_1.Entity);
;


/***/ }),

/***/ "./src/Objects/Tree.ts":
/*!*****************************!*\
  !*** ./src/Objects/Tree.ts ***!
  \*****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Tree = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) {
    return call;
}
else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
} return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
} return self; }
function _isNativeReflectConstruct() { try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () { }));
}
catch (t) { } return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
} subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass)
    _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
const Entity_1 = __webpack_require__(/*! ../Main/Entity */ "./src/Main/Entity.ts");
exports.Tree = function (_Entity) {
    function Tree() {
        var _this;
        _classCallCheck(this, Tree);
        _this = _callSuper(this, Tree);
        _this.view = "🌳";
        return _this;
    }
    _inherits(Tree, _Entity);
    return _createClass(Tree);
}(Entity_1.Entity);
;


/***/ }),

/***/ "./src/Utils/BFS.ts":
/*!**************************!*\
  !*** ./src/Utils/BFS.ts ***!
  \**************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.BFS = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o)
    return; if (typeof o === "string")
    return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor)
    n = o.constructor.name; if (n === "Map" || n === "Set")
    return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null)
    return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr))
    return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length)
    len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i]; return arr2; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
const Neighbors_1 = __webpack_require__(/*! ./Neighbors */ "./src/Utils/Neighbors.ts");
var BreadthFirstSearch = /*#__PURE__*/ function () {
    function BreadthFirstSearch() {
        _classCallCheck(this, BreadthFirstSearch);
        this.neighbors = new Neighbors_1.Neighbors();
    }
    return _createClass(BreadthFirstSearch, [{
            key: "search",
            value: function search(position, mapOfTheGame, goal) {
                var _this = this;
                var width = mapOfTheGame.width, height = mapOfTheGame.height, map = mapOfTheGame.map;
                var queue = [];
                queue.push([position]);
                var visited = [];
                var _loop = function _loop() {
                    var path = queue.shift();
                    var lastPosition = path.at(-1);
                    if (visited.includes(lastPosition))
                        return 0; // continue
                    var node = map.get(lastPosition);
                    //@ts-ignore
                    if (node instanceof goal) {
                        return {
                            v: path
                        };
                    }
                    visited.push(lastPosition);
                    var neighborsPositions = _this.neighbors.getNeighbors(lastPosition, width, height);
                    var filterPositions = neighborsPositions.filter(function (pos) {
                        var lastPositionQueue = queue.map(function (array) {
                            return array.at(-1);
                        });
                        if (lastPositionQueue.includes(pos)) {
                            return false;
                        }
                        //@ts-ignore
                        if (!visited.includes(pos) && map.get(pos) instanceof goal) {
                            return true;
                        }
                        if (!visited.includes(pos) && !map.get(pos)) {
                            // empty place
                            return true;
                        }
                        return false;
                    });
                    var filterPositionWithHistory = filterPositions.map(function (el) {
                        return [].concat(_toConsumableArray(path), [el]);
                    });
                    queue.push.apply(queue, _toConsumableArray(filterPositionWithHistory));
                }, _ret;
                while (queue.length > 0) {
                    _ret = _loop();
                    if (_ret === 0)
                        continue;
                    if (_ret)
                        return _ret.v;
                }
                return null;
            }
        }]);
}();
exports.BFS = new BreadthFirstSearch();


/***/ }),

/***/ "./src/Utils/Neighbors.ts":
/*!********************************!*\
  !*** ./src/Utils/Neighbors.ts ***!
  \********************************/
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.Neighbors = void 0;
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o)
    return; if (typeof o === "string")
    return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor)
    n = o.constructor.name; if (n === "Map" || n === "Set")
    return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length)
    len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) {
    var e, n, i, u, a = [], f = !0, o = !1;
    try {
        if (i = (t = t.call(r)).next, 0 === l) {
            if (Object(t) !== t)
                return;
            f = !1;
        }
        else
            for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0)
                ;
    }
    catch (r) {
        o = !0, n = r;
    }
    finally {
        try {
            if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u))
                return;
        }
        finally {
            if (o)
                throw n;
        }
    }
    return a;
} }
function _arrayWithHoles(arr) { if (Array.isArray(arr))
    return arr; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
exports.Neighbors = function () {
    function Neighbors() {
        _classCallCheck(this, Neighbors);
    }
    return _createClass(Neighbors, [{
            key: "getNeighbors",
            value: function getNeighbors(position, width, height) {
                var neighbors = [];
                var _position$split$map = position.split("/").map(function (el) {
                    return Number(el);
                }), _position$split$map2 = _slicedToArray(_position$split$map, 2), x = _position$split$map2[0], y = _position$split$map2[1];
                if (x + 1 < width) {
                    // right
                    neighbors.push(this.transformToKey(x + 1, y));
                }
                if (x - 1 >= 0) {
                    // left
                    neighbors.push(this.transformToKey(x - 1, y));
                }
                if (y + 1 < height) {
                    // down
                    neighbors.push(this.transformToKey(x, y + 1));
                }
                if (y - 1 >= 0) {
                    // up
                    neighbors.push(this.transformToKey(x, y - 1));
                }
                if (x + 1 < width && y + 1 < height) {
                    // right-down corner
                    neighbors.push(this.transformToKey(x + 1, y + 1));
                }
                if (x + 1 < width && y - 1 >= 0) {
                    // right-up corner
                    neighbors.push(this.transformToKey(x + 1, y - 1));
                }
                if (x - 1 >= 0 && y + 1 < height) {
                    // left-down corner
                    neighbors.push(this.transformToKey(x - 1, y + 1));
                }
                if (x - 1 >= 0 && y - 1 >= 0) {
                    // left-up corner
                    neighbors.push(this.transformToKey(x - 1, y - 1));
                }
                return neighbors;
            }
        }, {
            key: "transformToKey",
            value: function transformToKey(x, y) {
                return [x, y].join("/");
            }
        }]);
}();
;


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {
var exports = __webpack_exports__;
/*!**************************!*\
  !*** ./src/Main/main.ts ***!
  \**************************/

Object.defineProperty(exports, "__esModule", ({ value: true }));
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o);
}
function _regeneratorRuntime() {
    "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */
    _regeneratorRuntime = function _regeneratorRuntime() { return e; };
    var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
    function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; }
    try {
        define({}, "");
    }
    catch (t) {
        define = function define(t, e, r) { return t[e] = r; };
    }
    function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; }
    function tryCatch(t, e, r) { try {
        return { type: "normal", arg: t.call(e, r) };
    }
    catch (t) {
        return { type: "throw", arg: t };
    } }
    e.wrap = wrap;
    var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
    function Generator() { }
    function GeneratorFunction() { }
    function GeneratorFunctionPrototype() { }
    var p = {};
    define(p, a, function () { return this; });
    var d = Object.getPrototypeOf, v = d && d(d(values([])));
    v && v !== r && n.call(v, a) && (p = v);
    var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
    function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); }
    function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) {
        var u = c.arg, h = u.value;
        return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); });
    } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); }
    function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f)
        throw Error("Generator is already running"); if (o === s) {
        if ("throw" === i)
            throw a;
        return { value: t, done: !0 };
    } for (n.method = i, n.arg = a;;) {
        var c = n.delegate;
        if (c) {
            var u = maybeInvokeDelegate(c, n);
            if (u) {
                if (u === y)
                    continue;
                return u;
            }
        }
        if ("next" === n.method)
            n.sent = n._sent = n.arg;
        else if ("throw" === n.method) {
            if (o === h)
                throw o = s, n.arg;
            n.dispatchException(n.arg);
        }
        else
            "return" === n.method && n.abrupt("return", n.arg);
        o = f;
        var p = tryCatch(e, r, n);
        if ("normal" === p.type) {
            if (o = n.done ? s : l, p.arg === y)
                continue;
            return { value: p.arg, done: n.done };
        }
        "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg);
    } }; }
    function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t)
        return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type)
        return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); }
    function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); }
    function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; }
    function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); }
    function values(e) { if (e || "" === e) {
        var r = e[a];
        if (r)
            return r.call(e);
        if ("function" == typeof e.next)
            return e;
        if (!isNaN(e.length)) {
            var o = -1, i = function next() { for (; ++o < e.length;)
                if (n.call(e, o))
                    return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; };
            return i.next = i;
        }
    } throw new TypeError(_typeof(e) + " is not iterable"); }
    return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e)
        r.push(n); return r.reverse(), function next() { for (; r.length;) {
        var t = r.pop();
        if (t in e)
            return next.value = t, next.done = !1, next;
    } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e)
            for (var r in this)
                "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type)
            throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done)
            throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) {
            var i = this.tryEntries[o], a = i.completion;
            if ("root" === i.tryLoc)
                return handle("end");
            if (i.tryLoc <= this.prev) {
                var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc");
                if (c && u) {
                    if (this.prev < i.catchLoc)
                        return handle(i.catchLoc, !0);
                    if (this.prev < i.finallyLoc)
                        return handle(i.finallyLoc);
                }
                else if (c) {
                    if (this.prev < i.catchLoc)
                        return handle(i.catchLoc, !0);
                }
                else {
                    if (!u)
                        throw Error("try statement without catch or finally");
                    if (this.prev < i.finallyLoc)
                        return handle(i.finallyLoc);
                }
            }
        } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) {
            var o = this.tryEntries[r];
            if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) {
                var i = o;
                break;
            }
        } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type)
            throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.finallyLoc === t)
                return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y;
        } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) {
            var r = this.tryEntries[e];
            if (r.tryLoc === t) {
                var n = r.completion;
                if ("throw" === n.type) {
                    var o = n.arg;
                    resetTryEntry(r);
                }
                return o;
            }
        } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try {
    var info = gen[key](arg);
    var value = info.value;
}
catch (error) {
    reject(error);
    return;
} if (info.done) {
    resolve(value);
}
else {
    Promise.resolve(value).then(_next, _throw);
} }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
} }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor)
        descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
} }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps)
    _defineProperties(Constructor.prototype, protoProps); if (staticProps)
    _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t)
    return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i))
        return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
} return ("string" === r ? String : Number)(t); }
var readline = Object(function webpackMissingModule() { var e = new Error("Cannot find module 'readline'"); e.code = 'MODULE_NOT_FOUND'; throw e; }())({
    input: process.stdin,
    output: process.stdout
});
const MapOfTheGame_1 = __webpack_require__(/*! ./MapOfTheGame */ "./src/Main/MapOfTheGame.ts");
const Renderer_1 = __webpack_require__(/*! ./Renderer */ "./src/Main/Renderer.ts");
const ArrangeAllObjects_1 = __webpack_require__(/*! ../Actions/ArrangeAllObjects */ "./src/Actions/ArrangeAllObjects.ts");
const MovementOfCreatures_1 = __webpack_require__(/*! ../Actions/MovementOfCreatures */ "./src/Actions/MovementOfCreatures.ts");
const AddGrass_1 = __webpack_require__(/*! ../Actions/AddGrass */ "./src/Actions/AddGrass.ts");
const AddHerbivores_1 = __webpack_require__(/*! ../Actions/AddHerbivores */ "./src/Actions/AddHerbivores.ts");
var Simulation = /*#__PURE__*/ function () {
    function Simulation() {
        _classCallCheck(this, Simulation);
        this.count = 0;
        this.play = false;
        this.mapOfTheGame = new MapOfTheGame_1.MapOfTheGame(10, 10);
        this.initActions = [];
        this.turnActions = [];
    }
    return _createClass(Simulation, [{
            key: "fillActions",
            value: function fillActions() {
                this.initActions.push(new ArrangeAllObjects_1.ArrangeAllObjects(this.mapOfTheGame));
                this.turnActions.push(new MovementOfCreatures_1.MovementOfCreatures(this.mapOfTheGame));
                this.turnActions.push(new AddGrass_1.AddGrass(this.mapOfTheGame));
                this.turnActions.push(new AddHerbivores_1.AddHerbivores(this.mapOfTheGame));
            }
        }, {
            key: "initial",
            value: function initial() {
                this.initActions.forEach(function (initAction) {
                    initAction.produce();
                });
                this.renderer = new Renderer_1.Renderer(this.mapOfTheGame);
            }
        }, {
            key: "nextTurn",
            value: function nextTurn() {
                this.turnActions.forEach(function (turnAction) {
                    turnAction.produce();
                });
                this.count++;
                this.renderer.show();
            }
        }, {
            key: "startSimulation",
            value: function () {
                var _startSimulation = _asyncToGenerator(/*#__PURE__*/ _regeneratorRuntime().mark(function _callee() {
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                        while (1)
                            switch (_context.prev = _context.next) {
                                case 0:
                                    this.play = true;
                                case 1:
                                    if (!this.play) {
                                        _context.next = 7;
                                        break;
                                    }
                                    _context.next = 4;
                                    return new Promise(function (resolve) {
                                        setTimeout(resolve, 500);
                                    });
                                case 4:
                                    if (this.play)
                                        this.nextTurn();
                                    _context.next = 1;
                                    break;
                                case 7:
                                case "end":
                                    return _context.stop();
                            }
                    }, _callee, this);
                }));
                function startSimulation() {
                    return _startSimulation.apply(this, arguments);
                }
                return startSimulation;
            }()
        }, {
            key: "pauseSimulation",
            value: function pauseSimulation() {
                this.play = false;
            }
        }]);
}();
var simulation = new Simulation();
simulation.fillActions();
simulation.initial();
simulation.renderer.show();
readline.on("line", function (cmd) {
    if (cmd === "n") {
        simulation.nextTurn();
    }
    if (cmd === "s") {
        simulation.startSimulation();
    }
    if (cmd === "p") {
        simulation.pauseSimulation();
    }
});

})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,